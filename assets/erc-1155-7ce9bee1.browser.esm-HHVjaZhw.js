var at=Object.defineProperty;var rt=(b,t,a)=>t in b?at(b,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):b[t]=a;var p=(b,t,a)=>rt(b,typeof t!="symbol"?t+"":t,a);import{az as et,B as y,l as Y,ah as R,aA as nt,v as g,m as h,T as C,Z as v,j as S,aB as N,aC as I,aD as G,aE as P,aF as K,aG as it,aH as B,aI as J,aJ as X,aK as q,aL as st,y as D,q as ot,aM as tt,x as ct,aN as k,aO as _,aP as pt,aQ as lt,ap as F,aR as ht,a1 as dt,a0 as mt}from"./index--0vTvdE6.js";import{a as E}from"./assertEnabled-d1700f0b.browser.esm-CgaOV3qL.js";import{d as w,h as x,C as ut}from"./contract-appuri-5c40af52.browser.esm-0mzU8i3W.js";import{F as gt,b as ft,c as L,D as U,u as wt}from"./QueryParams-32a56510.browser.esm-B651fB8O.js";import{D as Ct,c as yt}from"./contract-owner-49e75547.browser.esm-BO04FkpK.js";import{S as Wt,b as bt,M as Et,t as O,l as z,n as V,C as T,c as $,f as Tt,p as At,d as Mt,e as Q,g as Z,u as St,h as vt,i as H}from"./index-CESXRL5R.js";import{s as Nt}from"./setErc20Allowance-7f76f677.browser.esm-CJkPGCFa.js";class It{constructor(t,a,r){p(this,"set",h((()=>{var t=this;return async function(a,r){let e=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1;return t.setBatch.prepare([{tokenId:a,claimConditions:r}],e)}})()));p(this,"setBatch",h((()=>{var t=this;return async function(a){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;const e={},n=await Promise.all(a.map(async o=>{let{tokenId:l,claimConditions:d}=o,f=d;if(t.isLegacySinglePhaseDrop(t.contractWrapper)){if(r=!0,d.length===0)f=[{startTime:new Date(0),currencyAddress:Y,price:0,maxClaimableSupply:0,maxClaimablePerWallet:0,waitInSeconds:0,merkleRootHash:lt([0],32),snapshot:[]}];else if(d.length>1)throw new Error("Single phase drop contract cannot have multiple claim conditions, only one is allowed")}(t.isNewSinglePhaseDrop(t.contractWrapper)||t.isNewMultiphaseDrop(t.contractWrapper))&&f.forEach(s=>{var W;if(s.snapshot&&s.snapshot.length>0&&(s.maxClaimablePerWallet===void 0||s.maxClaimablePerWallet==="unlimited"))throw new Error(`maxClaimablePerWallet must be set to a specific value when an allowlist is set.
Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.

ex:
contract.claimConditions.set(tokenId, [{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])`);if(s.snapshot&&s.snapshot.length>0&&((W=s.maxClaimablePerWallet)==null?void 0:W.toString())==="0"&&s.snapshot.map(A=>{var M;return typeof A=="string"?0:Number(((M=A.maxClaimable)==null?void 0:M.toString())||0)}).reduce((A,M)=>A+M,0)===0)throw new Error("maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.")});const{snapshotInfos:u,sortedConditions:m}=await At(f,0,t.contractWrapper.getProvider(),t.storage,t.getSnapshotFormatVersion());return u.forEach(s=>{e[s.merkleRoot]=s.snapshotUri}),{tokenId:l,sortedConditions:m}})),i=await t.metadata.get(),c=[];for(const o of Object.keys(i.merkle||{}))e[o]=i.merkle[o];if(!Mt(i.merkle,e)){const o=await t.metadata.parseInputMetadata({...i,merkle:e}),l=await t.metadata._parseAndUploadMetadata(o);if(x("setContractURI",t.contractWrapper)){const d=new S(t.contractWrapper);c.push(d.encode("setContractURI",[l]))}else throw new Error("Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.")}if(n.forEach(o=>{let{tokenId:l,sortedConditions:d}=o;const f=new S(t.contractWrapper);if(t.isLegacySinglePhaseDrop(t.contractWrapper)){const u=new S(t.contractWrapper);c.push(u.encode("setClaimConditions",[l,Q(d[0]),r]))}else if(t.isLegacyMultiPhaseDrop(t.contractWrapper))c.push(f.encode("setClaimConditions",[l,d.map(Q),r]));else if(t.isNewSinglePhaseDrop(t.contractWrapper))c.push(f.encode("setClaimConditions",[l,Z(d[0]),r]));else if(t.isNewMultiphaseDrop(t.contractWrapper))c.push(f.encode("setClaimConditions",[l,d.map(Z),r]));else throw new Error("Contract does not support claim conditions")}),x("multicall",t.contractWrapper))return C.fromContractWrapper({contractWrapper:t.contractWrapper,method:"multicall",args:[c]});throw new Error("Contract does not support multicall")}})()));p(this,"update",h(async(t,a,r)=>{const e=await this.getAll(t),n=await St(a,r,e);return await this.set.prepare(t,n)}));this.storage=r,this.contractWrapper=t,this.metadata=a}async getActive(t,a){const r=await this.get(t),e=await this.metadata.get();return await O(r,0,this.contractWrapper.getProvider(),e.merkle,this.storage,(a==null?void 0:a.withAllowList)||!1)}async get(t,a){if(this.isLegacySinglePhaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[t]);return z(r)}else if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){const r=a!==void 0?a:await this.contractWrapper.read("getActiveClaimConditionId",[t]),e=await this.contractWrapper.read("getClaimConditionById",[t,r]);return z(e)}else if(this.isNewSinglePhaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[t]);return V(r)}else if(this.isNewMultiphaseDrop(this.contractWrapper)){const r=a!==void 0?a:await this.contractWrapper.read("getActiveClaimConditionId",[t]),e=await this.contractWrapper.read("getClaimConditionById",[t,r]);return V(e)}else throw new Error("Contract does not support claim conditions")}async getAll(t,a){if(this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[t]),e=r.currentStartId.toNumber(),n=r.count.toNumber(),i=[];for(let o=e;o<e+n;o++)i.push(await this.get(t,o));const c=await this.metadata.get();return Promise.all(i.map(o=>O(o,0,this.contractWrapper.getProvider(),c.merkle,this.storage,(a==null?void 0:a.withAllowList)||!1)))}else return[await this.getActive(t,a)]}async canClaim(t,a,r){return r&&(r=await g(r)),(await this.getClaimIneligibilityReasons(t,a,r)).length===0}async getClaimIneligibilityReasons(t,a,r){const e=[];let n,i;if(r===void 0)try{r=await this.contractWrapper.getSignerAddress()}catch(s){console.warn("failed to get signer address",s)}if(!r)return[T.NoWallet];const c=await g(r);try{i=await this.getActive(t)}catch(s){return k(s,"!CONDITION")||k(s,"no active mint condition")||k(s,"DropNoActiveCondition")?(e.push(T.NoClaimConditionSet),e):(e.push(T.Unknown),e)}if(i.availableSupply!=="unlimited"&&y.from(i.availableSupply).lt(a))return e.push(T.NotEnoughSupply),e;const l=_(i.merkleRootHash).length>0;let d=null;if(l){if(d=await this.getClaimerProofs(t,c),!d&&(this.isLegacySinglePhaseDrop(this.contractWrapper)||this.isLegacyMultiPhaseDrop(this.contractWrapper)))return e.push(T.AddressNotAllowed),e;if(d)try{const s=await this.prepareClaim(t,a,!1,c);let W;if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){if(n=await this.contractWrapper.read("getActiveClaimConditionId",[t]),[W]=await this.contractWrapper.read("verifyClaimMerkleProof",[n,c,t,a,s.proofs,s.maxClaimable]),!W)return e.push(T.AddressNotAllowed),e}else if(this.isLegacySinglePhaseDrop(this.contractWrapper)){if([W]=await this.contractWrapper.read("verifyClaimMerkleProof",[t,c,a,{proof:s.proofs,maxQuantityInAllowlist:s.maxClaimable}]),!W)return e.push(T.AddressNotAllowed),e}else this.isNewSinglePhaseDrop(this.contractWrapper)?await this.contractWrapper.read("verifyClaim",[t,c,a,s.currencyAddress,s.price,{proof:s.proofs,quantityLimitPerWallet:s.maxClaimable,currency:s.currencyAddressInProof,pricePerToken:s.priceInProof}]):this.isNewMultiphaseDrop(this.contractWrapper)&&(n=await this.contractWrapper.read("getActiveClaimConditionId",[t]),await this.contractWrapper.read("verifyClaim",[n,c,t,a,s.currencyAddress,s.price,{proof:s.proofs,quantityLimitPerWallet:s.maxClaimable,currency:s.currencyAddressInProof,pricePerToken:s.priceInProof}]))}catch(s){switch(console.warn("Merkle proof verification failed:","reason"in s?s.reason||s.errorName:s),s.reason||s.errorName){case"!Qty":case"DropClaimExceedLimit":e.push(T.OverMaxClaimablePerWallet);break;case"!PriceOrCurrency":case"DropClaimInvalidTokenPrice":e.push(T.WrongPriceOrCurrency);break;case"!MaxSupply":case"DropClaimExceedMaxSupply":e.push(T.NotEnoughSupply);break;case"cant claim yet":case"DropClaimNotStarted":e.push(T.ClaimPhaseNotStarted);break;default:{e.push(T.AddressNotAllowed);break}}return e}}if(this.isNewSinglePhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)){let s=y.from(0),W=$(i.maxClaimablePerWallet,0);try{s=await this.getSupplyClaimedByWallet(t,c)}catch{}if(d&&(W=$(d.maxClaimable,0)),W.gt(0)&&W.lt(s.add(a)))return e.push(T.OverMaxClaimablePerWallet),e;if((!l||l&&!d)&&(W.lte(s)||W.eq(0)))return e.push(T.AddressNotAllowed),e}let[f,u]=[y.from(0),y.from(0)];this.isLegacyMultiPhaseDrop(this.contractWrapper)?(n=await this.contractWrapper.read("getActiveClaimConditionId",[t]),[f,u]=await this.contractWrapper.read("getClaimTimestamp",[t,n,c])):this.isLegacySinglePhaseDrop(this.contractWrapper)&&([f,u]=await this.contractWrapper.read("getClaimTimestamp",[t,c]));const m=y.from(Date.now()).div(1e3);return f.gt(0)&&m.lt(u)?(u.eq(D)?e.push(T.AlreadyClaimed):e.push(T.WaitBeforeNextClaimTransaction),e):(i.price.gt(0)&&pt(),e)}async getClaimerProofs(t,a,r){const n=(await this.get(t,r)).merkleRoot;if(_(n).length>0){const c=await this.metadata.get(),o=await g(a);return await Tt(o,n.toString(),c.merkle,this.contractWrapper.getProvider(),this.storage,this.getSnapshotFormatVersion())}else return null}async getSupplyClaimedByWallet(t,a){const r=await g(a);if(this.isNewSinglePhaseDrop(this.contractWrapper))return await this.contractWrapper.read("getSupplyClaimedByWallet",[t,r]);if(this.isNewMultiphaseDrop(this.contractWrapper)){const e=await this.contractWrapper.read("getActiveClaimConditionId",[t]);return await this.contractWrapper.read("getSupplyClaimedByWallet",[t,e,r])}throw new Error("This contract does not support the getSupplyClaimedByWallet function")}async prepareClaim(t,a,r,e){const n=await g(e||await this.contractWrapper.getSignerAddress());return vt(n,a,await this.getActive(t),async()=>(await this.metadata.get()).merkle,0,this.contractWrapper,this.storage,r,this.getSnapshotFormatVersion())}async getClaimArguments(t,a,r,e){const n=await g(a);return this.isLegacyMultiPhaseDrop(this.contractWrapper)?[n,t,r,e.currencyAddress,e.price,e.proofs,e.maxClaimable]:this.isLegacySinglePhaseDrop(this.contractWrapper)?[n,t,r,e.currencyAddress,e.price,{proof:e.proofs,maxQuantityInAllowlist:e.maxClaimable},F("")]:[n,t,r,e.currencyAddress,e.price,{proof:e.proofs,quantityLimitPerWallet:e.maxClaimable,pricePerToken:e.priceInProof,currency:e.currencyAddressInProof},F("")]}async getClaimTransaction(t,a,r,e){if(e!=null&&e.pricePerToken)throw new Error("Price per token should be set via claim conditions by calling `contract.erc1155.claimConditions.set()`");const n=await this.prepareClaim(a,r,(e==null?void 0:e.checkERC20Allowance)||!0);return C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:await this.getClaimArguments(a,t,r,n),overrides:n.overrides})}isNewSinglePhaseDrop(t){return w(t,"ERC1155ClaimConditionsV2")}isNewMultiphaseDrop(t){return w(t,"ERC1155ClaimPhasesV2")}isLegacySinglePhaseDrop(t){return w(t,"ERC1155ClaimConditionsV1")}isLegacyMultiPhaseDrop(t){return w(t,"ERC1155ClaimPhasesV1")}getSnapshotFormatVersion(){return this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isLegacySinglePhaseDrop(this.contractWrapper)?H.V1:H.V2}}const j=v.object({address:mt,quantity:dt.default(1)}),Pt=v.union([v.array(v.string()).transform(async b=>await Promise.all(b.map(t=>j.parseAsync({address:t})))),v.array(j)]);class Dt{constructor(t){p(this,"featureName",B.name);p(this,"to",h(async(t,a,r,e)=>await this.getClaimTransaction(t,a,r,e)));this.contractWrapper=t}async getClaimTransaction(t,a,r,e){let n={};return e&&e.pricePerToken&&(n=await yt(this.contractWrapper,e.pricePerToken,r,e.currencyAddress,e.checkERC20Allowance)),C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:[await g(t),a,r],overrides:n})}}class Rt{constructor(t,a){p(this,"featureName",J.name);p(this,"to",h(async(t,a,r,e)=>await this.conditions.getClaimTransaction(t,a,r,e)));this.contractWrapper=t,this.storage=a;const r=new ut(this.contractWrapper,ht,this.storage);this.conditions=new It(t,r,this.storage)}}class xt{constructor(t,a,r){p(this,"featureName",X.name);p(this,"mint",h(async t=>{const a=t.payload,r=t.signature,[e,n]=await Promise.all([this.mapPayloadToContractStruct(a),this.contractWrapper.getCallOverrides()]);return await Nt(this.contractWrapper,e.pricePerToken.mul(e.quantity),a.currencyAddress,n),C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[e,r],overrides:n,parse:i=>{const c=this.contractWrapper.parseLogs("TokensMintedWithSignature",i.logs);if(c.length===0)throw new Error("No MintWithSignature event found");return{id:c[0].args.tokenIdMinted,receipt:i}}})}));p(this,"mintBatch",h(async t=>{const a=await Promise.all(t.map(i=>this.mapPayloadToContractStruct(i.payload))),r=t.map((i,c)=>{const o=a[c],l=i.signature,d=i.payload.price;if(y.from(d).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:o,signature:l}}),e=new S(this.contractWrapper),n=r.map(i=>e.encode("mintWithSignature",[i.message,i.signature]));if(x("multicall",this.contractWrapper))return C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[n],parse:i=>{const c=this.contractWrapper.parseLogs("TokensMintedWithSignature",i.logs);if(c.length===0)throw new Error("No MintWithSignature event found");return c.map(o=>({id:o.args.tokenIdMinted,receipt:i}))}});throw new Error("Multicall not supported on this contract!")}));this.contractWrapper=t,this.storage=a,this.roles=r}async verify(t){const a=t.payload,r=t.signature,e=await this.mapPayloadToContractStruct(a);return(await this.contractWrapper.read("verify",[e,r]))[0]}async generate(t){const a={...t,tokenId:D};return this.generateFromTokenId(a)}async generateFromTokenId(t){return(await this.generateBatchFromTokenIds([t]))[0]}async generateBatch(t){const a=t.map(r=>({...r,tokenId:D}));return this.generateBatchFromTokenIds(a)}async generateBatchFromTokenIds(t){var u;const a=this.contractWrapper.getSigner();ot(a),await((u=this.roles)==null?void 0:u.verify(["minter"],await a.getAddress()));const r=await Promise.all(t.map(m=>Wt.parseAsync(m))),e=r.map(m=>m.metadata),[n,i,c]=await Promise.all([L(e,this.storage),this.contractWrapper.getChainID(),tt(this.contractWrapper.address,this.contractWrapper.getProvider())]),o=await Promise.all(r.map((m,s)=>bt.parseAsync({...m,uri:n[s]}))),l=await Promise.all(o.map(m=>this.mapPayloadToContractStruct(m))),d=(c==null?void 0:c.type)==="TokenERC1155";return(await Promise.all(l.map(m=>this.contractWrapper.signTypedData(a,{name:d?"TokenERC1155":"SignatureMintERC1155",version:"1",chainId:i,verifyingContract:this.contractWrapper.address},{MintRequest:Et},m)))).map((m,s)=>({payload:o[s],signature:m.toString()}))}async mapPayloadToContractStruct(t){const a=await ct(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:a,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}}class Lt{constructor(t){p(this,"featureName",P.name);p(this,"tokens",h(async(t,a)=>{const r=await this.contractWrapper.getSignerAddress();return this.from.prepare(r,t,a)}));p(this,"from",h(async(t,a,r)=>C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[await g(t),a,r]})));p(this,"batch",h(async(t,a)=>{const r=await this.contractWrapper.getSignerAddress();return this.batchFrom.prepare(r,t,a)}));p(this,"batchFrom",h(async(t,a,r)=>C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burnBatch",args:[await g(t),a,r]})));this.contractWrapper=t}}class kt{constructor(t,a){p(this,"featureName",N.name);this.erc1155=t,this.contractWrapper=a}async all(t){const a=y.from((t==null?void 0:t.start)||0).toNumber(),r=y.from((t==null?void 0:t.count)||U).toNumber(),e=Math.min((await this.totalCount()).toNumber(),a+r);return await Promise.all([...Array(e-a).keys()].map(n=>this.erc1155.get((a+n).toString())))}async totalCount(){return await this.contractWrapper.read("nextTokenIdToMint",[])}async totalCirculatingSupply(t){return await this.contractWrapper.read("totalSupply",[t])}async owned(t,a){const[r,e]=await Promise.all([g(t||await this.contractWrapper.getSignerAddress()),this.contractWrapper.read("nextTokenIdToMint",[])]);let i=(await this.contractWrapper.read("balanceOfBatch",[Array(e.toNumber()).fill(r),Array.from(Array(e.toNumber()).keys())])).map((o,l)=>({tokenId:l,balance:o})).filter(o=>o.balance.gt(0));if(a){const o=(a==null?void 0:a.start)||0,l=(a==null?void 0:a.count)||U;i=i.slice(o,o+l)}return(await Promise.all(i.map(o=>this.erc1155.get(o.tokenId.toString())))).map((o,l)=>({...o,owner:r,quantityOwned:i[l].balance.toString()}))}}class Bt{constructor(t,a,r){p(this,"featureName",K.name);p(this,"lazyMint",h(async(t,a)=>{const r=await this.erc1155.nextTokenIdToMint(),e=await L(t,this.storage,r.toNumber(),a),n=e[0].substring(0,e[0].lastIndexOf("/"));for(let o=0;o<e.length;o++){const l=e[o].substring(0,e[o].lastIndexOf("/"));if(n!==l)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${n}' but got '${l}'`)}const i=o=>{const l=this.contractWrapper.parseLogs("TokensLazyMinted",o==null?void 0:o.logs),d=l[0].args.startTokenId,f=l[0].args.endTokenId,u=[];for(let m=d;m.lte(f);m=m.add(1))u.push({id:m,receipt:o,data:()=>this.erc1155.getTokenMetadata(m)});return u},c=await tt(this.contractWrapper.address,this.contractWrapper.getProvider());return this.isLegacyEditionDropContract(this.contractWrapper,c)?C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,`${n.endsWith("/")?n:`${n}/`}`],parse:i}):C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,`${n.endsWith("/")?n:`${n}/`}`,F("")],parse:i})}));p(this,"updateMetadata",h(async(t,a,r)=>{const e=await this.contractWrapper.read("getBaseURICount",[]);if(e.eq(0))throw new Error("No base URI set. Please set a base URI before updating metadata");const n=y.from(t);let i=y.from(0),c=y.from(0),o=0;for(let s=0;s<e.toNumber()&&(o=s,c=await this.contractWrapper.read("getBatchIdAtIndex",[o]),!c.gt(n));s++)i=c;const l=Array.from({length:c.sub(i).toNumber()},(s,W)=>W+i.toNumber()),d=await Promise.all(l.map(s=>this.erc1155.getTokenMetadata(s))),f=[];for(let s=0;s<d.length;s++){const{id:W,uri:A,...M}=d[s];y.from(n).eq(y.from(W))?f.push(a):f.push(M)}const u=await L(f,this.storage,i.toNumber(),r),m=u[0].substring(0,u[0].lastIndexOf("/"));return C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateBatchBaseURI",args:[o,`${m.endsWith("/")?m:`${m}/`}`]})}));this.erc1155=t,this.contractWrapper=a,this.storage=r,this.revealer=this.detectErc1155Revealable()}detectErc1155Revealable(){if(w(this.contractWrapper,"ERC1155Revealable"))return new Ct(this.contractWrapper,this.storage,q.name,()=>this.erc1155.nextTokenIdToMint())}isLegacyEditionDropContract(t,a){return a&&a.type==="DropERC1155"&&a.version<3||!1}}class Ft{constructor(t,a,r){p(this,"featureName",G.name);p(this,"to",h(async(t,a)=>{const r=a.map(l=>l.metadata),e=a.map(l=>l.supply),n=await L(r,this.storage),i=await g(t),c=new S(this.contractWrapper),o=await Promise.all(n.map(async(l,d)=>c.encode("mintTo",[i,D,l,e[d]])));return C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[o],parse:l=>{const d=this.contractWrapper.parseLogs("TokensMinted",l.logs);if(d.length===0||d.length<r.length)throw new Error("TokenMinted event not found, minting failed");return d.map(f=>{const u=f.args.tokenIdMinted;return{id:u,receipt:l,data:()=>this.erc1155.get(u)}})}})}));this.erc1155=t,this.contractWrapper=a,this.storage=r}}class _t{constructor(t,a,r){p(this,"featureName",I.name);p(this,"to",h(async(t,a)=>{const r=await this.getMintTransaction(t,a);return r.setParse(e=>{const n=this.contractWrapper.parseLogs("TransferSingle",e==null?void 0:e.logs);if(n.length===0)throw new Error("TransferSingleEvent event not found");const i=n[0].args.id;return{id:i,receipt:e,data:()=>this.erc1155.get(i.toString())}}),r}));p(this,"additionalSupplyTo",h(async(t,a,r)=>{const e=await this.erc1155.getTokenMetadata(a);return C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[await g(t),a,e.uri,r],parse:n=>({id:y.from(a),receipt:n,data:()=>this.erc1155.get(a)})})}));this.erc1155=t,this.contractWrapper=a,this.storage=r,this.batch=this.detectErc1155BatchMintable()}async getMintTransaction(t,a){const r=await wt(a.metadata,this.storage);return C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[await g(t),D,r,a.supply]})}detectErc1155BatchMintable(){if(w(this.contractWrapper,"ERC1155BatchMintable"))return new Ft(this.erc1155,this.contractWrapper,this.storage)}}class jt{constructor(t,a,r){p(this,"featureName",et.name);p(this,"transfer",h((()=>{var t=this;return async function(a,r,e){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:[0];const i=await t.contractWrapper.getSignerAddress();return C.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeTransferFrom",args:[i,await g(a),r,e,n]})}})()));p(this,"transferBatch",h((()=>{var t=this;return async function(a,r,e,n){let i=arguments.length>4&&arguments[4]!==void 0?arguments[4]:[0];const c=n?await g(n):await t.contractWrapper.getSignerAddress();return C.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeBatchTransferFrom",args:[c,await g(a),r,e,i]})}})()));p(this,"transferFrom",h((()=>{var t=this;return async function(a,r,e,n){let i=arguments.length>4&&arguments[4]!==void 0?arguments[4]:[0];return C.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeTransferFrom",args:[await g(a),await g(r),e,n,i]})}})()));p(this,"setApprovalForAll",h(async(t,a)=>C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setApprovalForAll",args:[t,a]})));p(this,"airdrop",h((()=>{var t=this;return async function(a,r,e){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:[0];const i=e?await g(e):await t.contractWrapper.getSignerAddress(),c=await t.balanceOf(i,a),o=await Pt.parseAsync(r),l=o.reduce((u,m)=>y.from(u).add(y.from((m==null?void 0:m.quantity)||1)),y.from(0));if(c.lt(y.from(l)))throw new Error(`The caller owns ${c.toString()} NFTs, but wants to airdrop ${l.toString()} NFTs.`);const d=new S(t.contractWrapper),f=o.map(u=>{let{address:m,quantity:s}=u;return d.encode("safeTransferFrom",[i,m,a,s,n])});return C.fromContractWrapper({contractWrapper:t.contractWrapper,method:"multicall",args:[f]})}})()));p(this,"mint",h(async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t)));p(this,"mintTo",h(async(t,a)=>E(this.mintable,I).to.prepare(t,a)));p(this,"mintAdditionalSupply",h(async(t,a)=>E(this.mintable,I).additionalSupplyTo.prepare(await this.contractWrapper.getSignerAddress(),t,a)));p(this,"mintAdditionalSupplyTo",h(async(t,a,r)=>E(this.mintable,I).additionalSupplyTo.prepare(t,a,r)));p(this,"mintBatch",h(async t=>this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(),t)));p(this,"mintBatchTo",h(async(t,a)=>{var r;return E((r=this.mintable)==null?void 0:r.batch,G).to.prepare(t,a)}));p(this,"burn",h(async(t,a)=>E(this.burnable,P).tokens.prepare(t,a)));p(this,"burnFrom",h(async(t,a,r)=>E(this.burnable,P).from.prepare(t,a,r)));p(this,"burnBatch",h(async(t,a)=>E(this.burnable,P).batch.prepare(t,a)));p(this,"burnBatchFrom",h(async(t,a,r)=>E(this.burnable,P).batchFrom.prepare(t,a,r)));p(this,"lazyMint",h(async(t,a)=>E(this.lazyMintable,K).lazyMint.prepare(t,a)));p(this,"updateMetadata",h(async(t,a)=>{if(this.lazyMintable)return this.lazyMintable.updateMetadata.prepare(t,a);if(w(this.contractWrapper,"ERC1155UpdatableMetadata")){const r=await this.storage.upload(a);return C.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setTokenURI",args:[t,r]})}else throw new R(it)}));p(this,"claim",h(async(t,a,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,a,r)));p(this,"claimTo",h(async(t,a,r,e)=>{const n=this.claimWithConditions,i=this.claimCustom;if(n)return n.to.prepare(t,a,r,e);if(i)return i.to.prepare(t,a,r,e);throw new R(B)}));this.contractWrapper=t,this.storage=a,this.query=this.detectErc1155Enumerable(),this.mintable=this.detectErc1155Mintable(),this.burnable=this.detectErc1155Burnable(),this.lazyMintable=this.detectErc1155LazyMintable(),this.signatureMintable=this.detectErc1155SignatureMintable(),this.claimCustom=this.detectErc1155Claimable(),this.claimWithConditions=this.detectErc1155ClaimableWithConditions(),this._chainId=r}get chainId(){return this._chainId}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(t){const[a,r]=await Promise.all([this.contractWrapper.read("totalSupply",[t]).catch(()=>y.from(0)),this.getTokenMetadata(t).catch(()=>({id:t.toString(),uri:"",...gt}))]);return{owner:Y,metadata:r,type:"ERC1155",supply:a.toString()}}async totalSupply(t){if(w(this.contractWrapper,"ERC1155Supply"))return await this.contractWrapper.read("totalSupply",[t]);throw new R(nt)}async balanceOf(t,a){return await this.contractWrapper.read("balanceOf",[await g(t),a])}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,a){return await this.contractWrapper.read("isApprovedForAll",[await g(t),await g(a)])}async nextTokenIdToMint(){if(x("nextTokenIdToMint",this.contractWrapper))return await this.contractWrapper.read("nextTokenIdToMint",[]);throw new Error("Contract requires the `nextTokenIdToMint` function available to determine the next token ID to mint")}async getAll(t){return E(this.query,N).all(t)}async totalCount(){return E(this.query,N).totalCount()}async totalCirculatingSupply(t){return E(this.query,N).totalCirculatingSupply(t)}async getOwned(t,a){return t&&(t=await g(t)),E(this.query,N).owned(t,a)}async getMintTransaction(t,a){return E(this.mintable,I).getMintTransaction(t,a)}async getClaimTransaction(t,a,r,e){const n=this.claimWithConditions,i=this.claimCustom;if(n)return n.conditions.getClaimTransaction(t,a,r,e);if(i)return i.getClaimTransaction(t,a,r,e);throw new R(B)}get claimConditions(){return E(this.claimWithConditions,J).conditions}get signature(){return E(this.signatureMintable,X)}get revealer(){var t;return E((t=this.lazyMintable)==null?void 0:t.revealer,q)}async getTokenMetadata(t){const a=await this.contractWrapper.read("uri",[t]);if(!a)throw new st;return ft(t,a,this.storage)}detectErc1155Enumerable(){if(w(this.contractWrapper,"ERC1155Enumerable"))return new kt(this,this.contractWrapper)}detectErc1155Mintable(){if(w(this.contractWrapper,"ERC1155Mintable"))return new _t(this,this.contractWrapper,this.storage)}detectErc1155Burnable(){if(w(this.contractWrapper,"ERC1155Burnable"))return new Lt(this.contractWrapper)}detectErc1155LazyMintable(){if(w(this.contractWrapper,"ERC1155LazyMintableV1")||w(this.contractWrapper,"ERC1155LazyMintableV2"))return new Bt(this,this.contractWrapper,this.storage)}detectErc1155SignatureMintable(){if(w(this.contractWrapper,"ERC1155SignatureMintable"))return new xt(this.contractWrapper,this.storage)}detectErc1155Claimable(){if(w(this.contractWrapper,"ERC1155ClaimCustom"))return new Dt(this.contractWrapper)}detectErc1155ClaimableWithConditions(){if(w(this.contractWrapper,"ERC1155ClaimConditionsV1")||w(this.contractWrapper,"ERC1155ClaimConditionsV2")||w(this.contractWrapper,"ERC1155ClaimPhasesV1")||w(this.contractWrapper,"ERC1155ClaimPhasesV2"))return new Rt(this.contractWrapper,this.storage)}}export{It as D,xt as E,jt as a};
