var B=Object.defineProperty;var F=(C,e,r)=>e in C?B(C,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):C[e]=r;var W=(C,e,r)=>F(C,typeof e!="symbol"?e+"":e,r);import{t as D,l as S,n as b,C as l,c as v,f as U,p as O,d as Q,e as N,g as M,u as V,h as Z,i as x}from"./index-CESXRL5R.js";import{v as w,aW as E,a1 as H,aN as P,aO as k,B as y,y as _,aP as j,m as L,aQ as q,l as z,j as A,T as I,ap as R}from"./index--0vTvdE6.js";import{h as T,d as u}from"./contract-appuri-5c40af52.browser.esm-0mzU8i3W.js";class Y{constructor(e,r,t){W(this,"set",L((()=>{var e=this;return async function(r){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,i=r;if(e.isLegacySinglePhaseDrop(e.contractWrapper)||e.isNewSinglePhaseDrop(e.contractWrapper)){if(t=!0,r.length===0)i=[{startTime:new Date(0),currencyAddress:z,price:0,maxClaimableSupply:0,maxClaimablePerWallet:0,waitInSeconds:0,merkleRootHash:q([0],32),snapshot:[]}];else if(r.length>1)throw new Error("Single phase drop contract cannot have multiple claim conditions, only one is allowed")}(e.isNewSinglePhaseDrop(e.contractWrapper)||e.isNewMultiphaseDrop(e.contractWrapper))&&i.forEach(a=>{var o;if(a.snapshot&&a.snapshot.length>0&&(a.maxClaimablePerWallet===void 0||a.maxClaimablePerWallet==="unlimited"))throw new Error(`maxClaimablePerWallet must be set to a specific value when an allowlist is set.
Example: Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.
contract.claimConditions.set([{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])`);if(a.snapshot&&a.snapshot.length>0&&((o=a.maxClaimablePerWallet)==null?void 0:o.toString())==="0"&&a.snapshot.map(m=>{var f;return typeof m=="string"?0:Number(((f=m.maxClaimable)==null?void 0:f.toString())||0)}).reduce((m,f)=>m+f,0)===0)throw new Error("maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.")});const{snapshotInfos:c,sortedConditions:s}=await O(i,await e.getTokenDecimals(),e.contractWrapper.getProvider(),e.storage,e.getSnapshotFormatVersion()),p={};c.forEach(a=>{p[a.merkleRoot]=a.snapshotUri});const g=await e.metadata.get(),h=[];if(!Q(g.merkle,p)){const a=await e.metadata.parseInputMetadata({...g,merkle:p}),o=await e.metadata._parseAndUploadMetadata(a);if(T("setContractURI",e.contractWrapper)){const m=new A(e.contractWrapper);h.push(m.encode("setContractURI",[o]))}else throw new Error("Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.")}const n=e.contractWrapper,d=new A(n);if(e.isLegacySinglePhaseDrop(n)){const a=new A(n);h.push(a.encode("setClaimConditions",[N(s[0]),t]))}else if(e.isLegacyMultiPhaseDrop(n))h.push(d.encode("setClaimConditions",[s.map(N),t]));else if(e.isNewSinglePhaseDrop(n))h.push(d.encode("setClaimConditions",[M(s[0]),t]));else if(e.isNewMultiphaseDrop(n))h.push(d.encode("setClaimConditions",[s.map(M),t]));else throw new Error("Contract does not support claim conditions");if(T("multicall",e.contractWrapper))return I.fromContractWrapper({contractWrapper:e.contractWrapper,method:"multicall",args:[h]});throw new Error("Contract does not support multicall")}})()));W(this,"update",L(async(e,r)=>{const t=await this.getAll(),i=await V(e,r,t);return await this.set.prepare(i)}));this.storage=t,this.contractWrapper=e,this.metadata=r}async getActive(e){const[r,t,i]=await Promise.all([this.get(),this.metadata.get(),this.getTokenDecimals()]);return await D(r,i,this.contractWrapper.getProvider(),t.merkle||{},this.storage,(e==null?void 0:e.withAllowList)||!1)}async get(e){if(this.isLegacySinglePhaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[]);return S(r)}else if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){const r=e!==void 0?e:await this.contractWrapper.read("getActiveClaimConditionId",[]),t=await this.contractWrapper.read("getClaimConditionById",[r]);return S(t)}else if(this.isNewSinglePhaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[]);return b(r)}else if(this.isNewMultiphaseDrop(this.contractWrapper)){const r=e!==void 0?e:await this.contractWrapper.read("getActiveClaimConditionId",[]),t=await this.contractWrapper.read("getClaimConditionById",[r]);return b(t)}else throw new Error("Contract does not support claim conditions")}async getAll(e){if(this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)){const[r,t]=await this.contractWrapper.read("claimCondition",[]),i=r.toNumber(),c=t.toNumber(),s=[];for(let n=i;n<i+c;n++)s.push(this.get(n));const[p,g,...h]=await Promise.all([this.metadata.get(),this.getTokenDecimals(),...s]);return Promise.all(h.map(n=>D(n,g,this.contractWrapper.getProvider(),p.merkle,this.storage,(e==null?void 0:e.withAllowList)||!1)))}else return[await this.getActive(e)]}async canClaim(e,r){return r&&(r=await w(r)),(await this.getClaimIneligibilityReasons(e,r)).length===0}async getClaimIneligibilityReasons(e,r){const t=[];let i,c;if(r===void 0)try{r=await this.contractWrapper.getSignerAddress()}catch(a){console.warn("failed to get signer address",a)}if(!r)return[l.NoWallet];const[s,p]=await Promise.all([w(r),this.getTokenDecimals()]),g=E(H.parse(e),p);try{c=await this.getActive()}catch(a){return P(a,"!CONDITION")||P(a,"no active mint condition")||P(a,"DropNoActiveCondition")?(t.push(l.NoClaimConditionSet),t):(console.warn("failed to get active claim condition",a),t.push(l.Unknown),t)}if(c.availableSupply!=="unlimited"&&E(c.availableSupply,p).lt(g))return t.push(l.NotEnoughSupply),t;const n=k(c.merkleRootHash).length>0;let d=null;if(n){if(d=await this.getClaimerProofs(s),!d&&(this.isLegacySinglePhaseDrop(this.contractWrapper)||this.isLegacyMultiPhaseDrop(this.contractWrapper)))return t.push(l.AddressNotAllowed),t;if(d)try{const a=await this.prepareClaim(e,!1,p,s);let o;if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){if(i=await this.contractWrapper.read("getActiveClaimConditionId",[]),[o]=await this.contractWrapper.read("verifyClaimMerkleProof",[i,s,e,a.proofs,a.maxClaimable]),!o)return t.push(l.AddressNotAllowed),t}else if(this.isLegacySinglePhaseDrop(this.contractWrapper)){if([o]=await this.contractWrapper.read("verifyClaimMerkleProof",[s,e,{proof:a.proofs,maxQuantityInAllowlist:a.maxClaimable}]),!o)return t.push(l.AddressNotAllowed),t}else this.isNewSinglePhaseDrop(this.contractWrapper)?await this.contractWrapper.read("verifyClaim",[s,e,a.currencyAddress,a.price,{proof:a.proofs,quantityLimitPerWallet:a.maxClaimable,currency:a.currencyAddressInProof,pricePerToken:a.priceInProof}]):this.isNewMultiphaseDrop(this.contractWrapper)&&(i=await this.contractWrapper.read("getActiveClaimConditionId",[]),await this.contractWrapper.read("verifyClaim",[i,s,e,a.currencyAddress,a.price,{proof:a.proofs,quantityLimitPerWallet:a.maxClaimable,currency:a.currencyAddressInProof,pricePerToken:a.priceInProof}]))}catch(a){switch(console.warn("Merkle proof verification failed:","reason"in a?a.reason||a.errorName:a),a.reason||a.errorName){case"!Qty":case"DropClaimExceedLimit":t.push(l.OverMaxClaimablePerWallet);break;case"!PriceOrCurrency":case"DropClaimInvalidTokenPrice":t.push(l.WrongPriceOrCurrency);break;case"!MaxSupply":case"DropClaimExceedMaxSupply":t.push(l.NotEnoughSupply);break;case"cant claim yet":case"DropClaimNotStarted":t.push(l.ClaimPhaseNotStarted);break;default:{t.push(l.AddressNotAllowed);break}}return t}}if(this.isNewSinglePhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)){let a=y.from(0),o=v(c.maxClaimablePerWallet,p);try{a=await this.getSupplyClaimedByWallet(s)}catch{}if(d&&(o=v(d.maxClaimable,p)),o.gt(0)&&o.lt(a.add(g)))return t.push(l.OverMaxClaimablePerWallet),t;if((!n||n&&!d)&&(o.lte(a)||o.eq(0)))return t.push(l.AddressNotAllowed),t}if(this.isLegacySinglePhaseDrop(this.contractWrapper)||this.isLegacyMultiPhaseDrop(this.contractWrapper)){let[a,o]=[y.from(0),y.from(0)];this.isLegacyMultiPhaseDrop(this.contractWrapper)?(i=await this.contractWrapper.read("getActiveClaimConditionId",[]),[a,o]=await this.contractWrapper.read("getClaimTimestamp",[i,s])):this.isLegacySinglePhaseDrop(this.contractWrapper)&&([a,o]=await this.contractWrapper.read("getClaimTimestamp",[s]));const m=y.from(Date.now()).div(1e3);if(a.gt(0)&&m.lt(o))return o.eq(_)?t.push(l.AlreadyClaimed):t.push(l.WaitBeforeNextClaimTransaction),t}return c.price.gt(0)&&j(),t}async getClaimerProofs(e,r){const i=(await this.get(r)).merkleRoot;if(k(i).length>0){const[s,p]=await Promise.all([this.metadata.get(),w(e)]);return await U(p,i.toString(),s.merkle,this.contractWrapper.getProvider(),this.storage,this.getSnapshotFormatVersion())}else return null}async getSupplyClaimedByWallet(e){const r=await w(e);if(this.isNewSinglePhaseDrop(this.contractWrapper))return await this.contractWrapper.read("getSupplyClaimedByWallet",[r]);if(this.isNewMultiphaseDrop(this.contractWrapper)){const t=await this.contractWrapper.read("getActiveClaimConditionId",[]);return await this.contractWrapper.read("getSupplyClaimedByWallet",[t,r])}throw new Error("This contract does not support the getSupplyClaimedByWallet function")}async getTokenDecimals(){return u(this.contractWrapper,"ERC20")?this.contractWrapper.read("decimals",[]):Promise.resolve(0)}async prepareClaim(e,r){let t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0,i=arguments.length>3?arguments[3]:void 0;const[c,s]=await Promise.all([i||this.contractWrapper.getSignerAddress(),this.getActive()]);return Z(c,e,s,async()=>(await this.metadata.get()).merkle,t,this.contractWrapper,this.storage,r,this.getSnapshotFormatVersion())}async getClaimArguments(e,r,t){const i=await w(e);return this.isLegacyMultiPhaseDrop(this.contractWrapper)?[i,r,t.currencyAddress,t.price,t.proofs,t.maxClaimable]:this.isLegacySinglePhaseDrop(this.contractWrapper)?[i,r,t.currencyAddress,t.price,{proof:t.proofs,maxQuantityInAllowlist:t.maxClaimable},R("")]:[i,r,t.currencyAddress,t.price,{proof:t.proofs,quantityLimitPerWallet:t.maxClaimable,pricePerToken:t.priceInProof,currency:t.currencyAddressInProof},R("")]}async getClaimTransaction(e,r,t){if(t!=null&&t.pricePerToken)throw new Error("Price per token is be set via claim conditions by calling `contract.erc721.claimConditions.set()`");const i=await this.prepareClaim(r,(t==null?void 0:t.checkERC20Allowance)===void 0?!0:t.checkERC20Allowance,await this.getTokenDecimals());return I.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:await this.getClaimArguments(e,r,i),overrides:i.overrides})}isNewSinglePhaseDrop(e){return u(e,"ERC721ClaimConditionsV2")||u(e,"ERC20ClaimConditionsV2")}isNewMultiphaseDrop(e){return u(e,"ERC721ClaimPhasesV2")||u(e,"ERC20ClaimPhasesV2")}isLegacySinglePhaseDrop(e){return u(e,"ERC721ClaimConditionsV1")||u(e,"ERC20ClaimConditionsV1")}isLegacyMultiPhaseDrop(e){return u(e,"ERC721ClaimPhasesV1")||u(e,"ERC20ClaimPhasesV1")}getSnapshotFormatVersion(){return this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isLegacySinglePhaseDrop(this.contractWrapper)?x.V1:x.V2}}export{Y as D};
